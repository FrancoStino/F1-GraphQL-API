name: F1 Sync DB

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Every Day at midnight

jobs:
  update-database:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y mariadb-client unzip curl jq pv
          yarn install
      - name: Configure Git for yarn version
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      - name: Get latest F1DB release
        id: get_latest_release
        run: |
          LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/f1db/f1db/releases/latest | jq -r '.assets[] | select(.name == "f1db-sql-mysql-single-inserts.zip") | .browser_download_url')
          LATEST_RELEASE_TAG=$(curl -s https://api.github.com/repos/f1db/f1db/releases/latest | jq -r '.tag_name')
          echo "download_url=$LATEST_RELEASE_URL" >> "$GITHUB_OUTPUT"
          echo "latest_tag=$LATEST_RELEASE_TAG" >> "$GITHUB_OUTPUT"
          echo "Download URL: $LATEST_RELEASE_URL"
          echo "Latest Tag: $LATEST_RELEASE_TAG"
      - name: Check if release exists in last-release.txt
        id: check_release
        run: |
          LATEST_TAG="${{ steps.get_latest_release.outputs.latest_tag }}"
          if [ ! -s "db/last-release.txt" ]; then
            echo "Last release file is empty, populating with latest release"
            echo "$LATEST_TAG" > db/last-release.txt
            echo "is_new_release=true" >> "$GITHUB_OUTPUT"
          else
            CURRENT_RELEASE=$(cat db/last-release.txt)
            echo "Current stored release: $CURRENT_RELEASE"
            echo "Latest release: $LATEST_TAG"
            if [ "$CURRENT_RELEASE" != "$LATEST_TAG" ]; then
              echo "New release detected"
              echo "is_new_release=true" >> "$GITHUB_OUTPUT"
            else
              echo "No new release detected"
              echo "is_new_release=false" >> "$GITHUB_OUTPUT"
            fi
          fi
      - name: Exit if no new release
        if: steps.check_release.outputs.is_new_release == 'false'
        run: |
          echo "No new release found. Exiting workflow."
          exit 0
      - name: Download F1DB release
        if: steps.check_release.outputs.is_new_release == 'true'
        run: |
          curl -L ${{ steps.get_latest_release.outputs.download_url }} -o f1db.zip
          unzip f1db.zip
          ls -la
      - name: Apply SQL to database
        if: steps.check_release.outputs.is_new_release == 'true'
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: davideladisa.it
          DB_USER: um5i6722_f1_graphql
          DB_NAME: um5i6722_f1_graphql
        run: |
          echo "ðŸ‘‰ Start MARIADB"
          SQL_FILE=$(find . -name "f1db-sql-mysql-single-inserts.sql")
          echo "Find SQL file: $SQL_FILE"
          pv "$SQL_FILE" | mariadb --skip-ssl \
            -h $DB_HOST \
            -u $DB_USER \
            -p"$DB_PASSWORD" \
            $DB_NAME
          echo "âœ… Exit Execution MARIADB"
      - name: Update last-release.txt
        if: steps.check_release.outputs.is_new_release == 'true'
        run: |
          echo "${{ steps.get_latest_release.outputs.latest_tag }}" > db/last-release.txt
          echo "Updated last-release.txt with new version"
      - name: Update package.json version with yarn
        if: steps.check_release.outputs.is_new_release == 'true'
        run: |
          yarn version --patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Updated package.json to version $NEW_VERSION"
      - name: Add & Commit changes
        if: steps.check_release.outputs.is_new_release == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          add: "db/last-release.txt package.json"
          message: "chore: update last-release.txt and bump version after DB sync"
          default_author: github_actions